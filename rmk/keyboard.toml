[keyboard]
name = "sessile"
product_name = "sessile"
vendor_id = 0x4c4b
product_id = 0x4643
manufacturer = "RMK"
board = "XIAO BLE"

[matrix]
row_pins = ["P1_12", "P0_10", "P0_09", "P1_11"]
col_pins = ["P0_02", "P1_15", "P0_03", "P1_14", "P0_28", "P1_13", "P0_29"]

[layout]
rows = 4
cols = 7
layers = 4
matrix_map = """
(0,0,L) (1,0,L) (2,0,L) (3,0,L) (0,1,R) (1,1,R) (2,1,R) (3,1,R)
(0,2,L) (1,2,L) (2,2,L) (3,2,L) (0,3,R) (1,3,R) (2,3,R) (3,3,R)
(0,4,L) (1,4,L) (2,4,L) (3,4,L) (0,5,R) (1,5,R) (2,5,R) (3,5,R)
                (0,6,L) (1,6,L) (2,6,R) (3,6,R)
"""

[[layer]]
name = "caster"
keys = """
B F D L P O U Y
MT(C, LCtrl) MT(S, LAlt) MT(T, LGui) MT(R, LShift) MT(N, RShift) MT(A, RGui) MT(I, RAlt) MT(H, RCtrl)
V G M W Dot Comma Quote K
LT(2, Backspace) LT(1, Space) E Enter
"""

[[layer]]
name = "numbnav"
keys = """
KpEnter Kp7 Kp8 Kp9 KbVolumeDown KbMute KbVolumeUp __
Kp0 Kp4 Kp5 Kp6 Left Down Up Right
KpDot Kp1 Kp2 Kp3 Home PageDown PageUp End
__ __ __ __
"""

[[layer]]
name = "function"
keys = """
F12 F7 F8 F9 MediaPrevTrack MediaPlayPause MediaNextTrack MediaEject
F11 F4 F5 F6 __ __ __ __
F10 F1 F2 F3 __ __ __ __
__ __ __ __
"""

[[layer]]
name = "upsidedown"
keys = """
Y U O P L D F B
MT(H, LCtrl) MT(I, LAlt) MT(A, LGui) MT(N, LShift) MT(R, RShift) MT(T, RGui) MT(S, RAlt) MT(C, RCtrl)
K Quote Comma Dot W M G V
LT(2, Enter) LT(1, E) Space Backspace
"""

[ble]
enabled = true
battery_adc_pin = "P0_31"
adc_divider_measured = 510
adc_divider_total = 1510

[light]
# P0_17 CHG (active high)
# P0_26 RED LED
# P0_30 GREEN LED
# PO_06 BLUE LED
capslock = { pin = "P0_06", low_active = true }
scrolllock = { pin = "P0_14", low_active = false }

[storage]
clear_storage = false

[behavior.morse]
enable_flow_tap = true
unilateral_tap = true
permissive_hold = true
hold_timeout = "200ms"
prior_idle_time = "150ms"

[[behavior.macro.macros]]
operations = [{ operation = "text", text = "=>" }]

[behavior.combo]
timeout = "25ms"
combos = [
    { actions = [
        "MT(S, LAlt)",
        "MT(T, LGui)",
    ], output = "Esc", layer = 0 },
    { actions = [
        "MT(R, LShift)",
        "MT(N, RShift)",
    ], output = "CapsWordToggle", layer = 0 },
    { actions = [
        "MT(S, LAlt)",
        "MT(R, LShift)",
    ], output = "OSM(LShift)", layer = 0 },
    { actions = [
        "MT(I, RAlt)",
        "MT(N, RShift)",
    ], output = "OSM(RShift)", layer = 0 },
    { actions = [
        "MT(C, LCtrl)",
        "MT(H, RCtrl)",
    ], output = "CapsLock", layer = 0 },

    { actions = [
        "MT(S, LAlt)",
        "MT(T, LGui)",
        "MT(R, LShift)",
    ], output = "OSL(3)", layer = 0 },
    { actions = [
        "MT(I, RAlt)",
        "MT(A, RGui)",
        "MT(N, RShift)",
    ], output = "OSL(3)", layer = 0 },
    { actions = [
        "MT(C, LCtrl)",
        "MT(S, LAlt)",
    ], output = "Tab", layer = 0 },
    { actions = [
        "W",
        "M",
    ], output = "-" },
    { actions = [
        "Dot",
        "Comma",
    ], output = "/" },
    { actions = [
        "MT(H, RCtrl)",
        "MT(I, RAlt)",
    ], output = ";", layer = 0 },
    { actions = [
        "P",
        "O",
    ], output = "\\", layer = 0 },
    { actions = [
        "V",
        "G",
    ], output = "Q", layer = 0 },
    { actions = [
        "G",
        "M",
    ], output = "J", layer = 0 },
    { actions = [
        "V",
        "W",
    ], output = "Z", layer = 0 },
    { actions = [
        "B",
        "MT(C, LCtrl)",
    ], output = "1", layer = 0 },
    { actions = [
        "F",
        "MT(S, LAlt)",
    ], output = "2", layer = 0 },
    { actions = [
        "D",
        "MT(T, LGui)",
    ], output = "3", layer = 0 },
    { actions = [
        "L",
        "MT(R, LShift)",
    ], output = "4", layer = 0 },
    { actions = [
        "LT(2, Backspace)",
        "LT(1, Space)",
    ], output = "5", layer = 0 },
    { actions = [
        "E",
        "Enter",
    ], output = "6", layer = 0 },
    { actions = [
        "P",
        "MT(N, RShift)",
    ], output = "7", layer = 0 },
    { actions = [
        "O",
        "MT(A, RGui)",
    ], output = "8", layer = 0 },
    { actions = [
        "U",
        "MT(I, RAlt)",
    ], output = "9", layer = 0 },
    { actions = [
        "Y",
        "MT(H, RCtrl)",
    ], output = "0", layer = 0 },
    { actions = [
        "V",
        "MT(C, LCtrl)",
    ], output = "WM(Z, LGui)", layer = 0 },
    { actions = [
        "G",
        "MT(S, LAlt)",
    ], output = "WM(X, LGui)", layer = 0 },
    { actions = [
        "M",
        "MT(T, LGui)",
    ], output = "WM(C, LGui)", layer = 0 },
    { actions = [
        "W",
        "MT(R, LShift)",
    ], output = "WM(V, LGui)", layer = 0 },
    { actions = [
        "Dot",
        "MT(N, RShift)",
    ], output = "Left", layer = 0 },
    { actions = [
        "Comma",
        "MT(A, RGui)",
    ], output = "Down", layer = 0 },
    { actions = [
        "Quote",
        "MT(I, RAlt)",
    ], output = "UP", layer = 0 },
    { actions = [
        "K",
        "MT(H, RCtrl)",
    ], output = "Right", layer = 0 },
    { actions = [
        "B",
        "F",
    ], output = "Grave", layer = 0 },
    { actions = [
        "F",
        "D",
    ], output = "X", layer = 0 },
    { actions = [
        "D",
        "L",
    ], output = "=" },
    # { actions = [
    #     "Comma",
    #     "Quote",
    #     "K",
    # ], output = "Macro0", layer = 0 },
    { actions = [
        "O",
        "U",
    ], output = "LeftBracket", layer = 0 },
    { actions = [
        "P",
        "Y",
    ], output = "RightBracket", layer = 0 },
    { actions = [
        "Y",
        "O",
    ], output = "SHIFTED(9)", layer = 0 },
    { actions = [
        "U",
        "P",
    ], output = "SHIFTED(0)", layer = 0 },
    { actions = [
        "Comma",
        "Quote",
    ], output = "SHIFTED(LeftBracket)", layer = 0 },
    { actions = [
        "Dot",
        "K",
    ], output = "SHIFTED(RightBracket)", layer = 0 },
    { actions = [
        "Comma",
        "K",
    ], output = "SHIFTED(Comma)", layer = 0 },
    { actions = [
        "Dot",
        "Quote",
    ], output = "SHIFTED(Dot)", layer = 0 },
    { actions = [
        "U",
        "Y",
    ], output = "Bootloader", layer = 2 },

]


[rmk]
# Maximum number of combos keyboard can store
combo_max_num = 64
